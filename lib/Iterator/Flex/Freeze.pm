package Iterator::Flex::Freeze;

# ABSTRACT:  Freeze an iterator after every next

use strict;
use warnings;
use experimental 'signatures';

our $VERSION = '0.13';

use Iterator::Flex::Factory;
use Iterator::Flex::Utils qw( RETURN EXHAUSTION :IterAttrs :Methods );
use parent 'Iterator::Flex::Base';
use Scalar::Util;
use Ref::Util;

use namespace::clean;

=method construct

  $iter = Iterator::Flex::Freeze->new( $coderef, $iterator, ?\%pars );

Construct a pass-through iterator which freezes the input iterator
after every call to C<next>.  C<$coderef> will be passed the frozen state
(generated by calling C<$iterator->freeze> via C<$_>, with which it
can do as it pleases.

<$coderef> I<is> executed when C<$iterator> is exhausted.

The optional C<%pars> hash may contain standard I<signal
parameters|Iterator::Flex::Manual::Overview/Signal Parameters>.

The returned iterator supports the following methods:

=over

=item next

=item prev

If C<$iterator> provides a C<prev> method.

=item rewind

=item freeze

=back

=cut


sub new ( $class, $code, $iterator, $pars = {} ) {

    $class->_throw( parameter => "'serialize' parameter is not a coderef" )
      unless Ref::Util::is_coderef( $code );

    $class->_throw( parameter => "iterator (@{[ $iterator->_name ]}) must provide a freeze method" )
      unless $class->_can_meth( $iterator, +FREEZE );

    $class->_throw( parameter =>
          "iterator (@{[ $iterator->_name ]}) must provide set_exhausted/is_exhausted methods" )
      unless $class->_can_meth( $iterator, +SET_EXHAUSTED )
      && $class->_can_meth( $iterator, +IS_EXHAUSTED );

    $class->SUPER::new( { serialize => $code, src => $iterator }, $pars );
}


sub construct ( $class, $state ) {

    $class->_throw( parameter => "'state' parameter must be a HASH reference" )
      unless Ref::Util::is_hashref( $state );

    my ( $serialize, $src ) = @{$state}{ qw( serialize src ) };

    $class->_throw( parameter => "'serialize' must be a CODE reference" )
      unless Ref::Util::is_coderef( $serialize );

    # wrap the source iterator so that it returns undef on exhaustion.
    $src
      = Iterator::Flex::Factory->to_iterator( $src, { (+EXHAUSTION) => +RETURN } );

    my $self;
    my %params = (
        (+_NAME) => 'freeze',

        (+_SELF) => \$self,

        (+_DEPENDS) => $src,
        (+NEXT)     => sub {
            my $value = $src->();
            local $_ = $src->freeze;
            &$serialize();
            $value = $self->signal_exhaustion if $src->is_exhausted;
            return $value;
        },
    );

    Scalar::Util::weaken $src;
    $params{+_ROLES} = [];
    for my $meth ( +PREV, +CURRENT, +REWIND, +RESET ) {
        next unless $src->may( $meth );
        my $sub = $src->can( $meth );
        Scalar::Util::weaken $sub;
        $params{$meth} = sub {
            $src->$sub();
        };

        # figure out which role was used to describe the capability
        my $Umeth = ucfirst $meth;
        my $role;
        for my $suffix ( 'Closure', 'Method' ) {
            $role = eval {
                $class->_load_role( $suffix ? $Umeth . '::' . $suffix : $Umeth );
            };
            next if $@ ne '';
            last if $src->does( $role );
            undef $role;
        };

        $class->_throw( class => "unable to find role for '$meth' capability for @{[ $src->_name ]}" )
          unless defined $role;


        # need '+' as role names are fully qualified
        push $params{+_ROLES}->@*, '+' . $role;
    }


    return \%params;
}

__PACKAGE__->_add_roles( qw[
      State::Registry
      Next::ClosedSelf
] );

1;

# COPYRIGHT
