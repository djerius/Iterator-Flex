# NAME

Iterator::Flex - Iterators which can be rewound and serialized

# VERSION

version 0.04

# SYNOPSIS

# DESCRIPTION

`Iterator::Flex` implements iterators with the following characteristics:

- _next_

    All iterators provide a `next` method which advances the iterator and
    returns the new value.

- _exhaustion_

    Iterator exhaustion is signified by `next` return `undef`.

- _reset_

    Iterators may optionally be rewound to their initial state

- _previous values_

    Iterators may optionally return their previous value.

- _current_

    Iterators return their current value.

- _freeze_

    Iterators may optionally provide a `freeze` method for serialization.
    Iterators may be chained, and an iterator's dependencies are frozen automatically.

# SUBROUTINES

## iterator

## iter

    $iter = iter( $object );

Transform `$object` into an iterator.  It accepts

## iarray

    $iterator = iarray( $array_ref );

Wrap an array in an iterator.

The returned iterator supports the following methods:

- current
- next
- prev
- rewind
- reset
- freeze

## icache

    $iterator = icache( $iterable );

The iterator caches the current and previous values of the passed iterator,

The returned iterator supports the following methods:

- reset
- rewind
- next
- prev
- current
- freeze

## igrep

    $iterator = igrep { CODE } $iterable;

Returns an iterator equivalent to running [grep](https://metacpan.org/pod/grep) on `$iterable` with the specified code.
`CODE` is _not_ run if `$iterable` returns _undef_ (that is, it is exhausted).

The iterator supports the following methods:

- next
- reset

## imap

    $iterator = imap { CODE } $iteraable;

Returns an iterator equivalent to running [map](https://metacpan.org/pod/map) on `$iterable` with the specified code.
`CODE` is _not_ run if `$iterable` returns _undef_ (that is, it is exhausted).

The iterator supports the following methods:

- next
- reset

## iproduct

    $iterator = iproduct( $iterable1, $iterable2, ... );
    $iterator = iproduct( key1 => $iterable1, key2 => iterable2, ... );

Returns an iterator which produces a Cartesian product of the input iterables.
If the input to **iproduct** is a list of iterables, `$iterator` will return an
array reference containing an element from each iterable.

If the input is a list of key, iterable pairs, `$iterator` will return a
hash reference.

All of the iterables must support the `rewind` method.

The iterator supports the following methods:

- current
- next
- reset
- rewind
- freeze

    This iterator may be frozen only if all of the iterables support the
    `prev` or `__prev__` method.

## iseq

    # integer sequence starting at 0, incrementing by 1, ending at $end
    $iterator = iseq( $end );

    # integer sequence starting at $begin, incrementing by 1, ending at $end
    $iterator = iseq( $begin, $end );

    # real sequence starting at $begin, incrementing by $step, ending <= $end
    $iterator = iseq( $begin, $end, $step );

The iterator supports the following methods:

- current
- next
- prev
- rewind
- freeze

## ifreeze

    $iter = ifreeze { CODE } $iterator;

Construct a pass-through iterator which freezes the input iterator
after every call to `next`.  `CODE` will be passed the frozen state
(generated by calling `$iterator-`freeze> via `$_`, with which it
can do as it pleases.

<CODE> _is_ executed when `$iterator` returns _undef_ (that is,
when `$iterator` is exhausted).

The returned iterator supports the following methods:

- next
- prev

    If `$iterator` provides a `prev` method.

- rewind
- freeze

## thaw

    $frozen = $iterator->freeze;
    $iterator = thaw( $frozen );

Restore an iterator that has been frozen.  See ["Serialization of
Iterators"](#serialization-of-iterators) for more information.

# METHODS

Not all iterators support all methods.

- prev

        $value = $iter->prev;

    Returns the previous value of the iterator.  If the iterator was never
    advanced, this returns `undef`.  If the iterator is exhausted, this
    returns the last retrieved value. Use the [state](https://metacpan.org/pod/state) method to determine
    which state the iterator is in.

- current

        $value = $iter->current;

    Returns the current value of the iterator.  If the iterator was never
    advanced, this returns undef.  If the iterator is exhausted, this
    returns `undef`.  Use the [state](https://metacpan.org/pod/state) method to determine which state
    the iterator is in.

- next

        $value = $iter->next;

    Return the next value from the iterator.

- rewind

        $iter->rewind;

    Resets the iterator so that the next value returned is the very first
    value.  It should not affect the results of the [prev](https://metacpan.org/pod/prev) and [current](https://metacpan.org/pod/current)
    methods.  The iterator's state is set to _active_.

- reset

        $iter->reset;

    Resets the iterator to its initial state.  The iterator's state is not
    changed.

- state

        $state = $iter->state;

    Returns the state of the iterator. It is one of:

    - Iterator::Constant::INACTIVE

        The iterator has never been advanced.  [prev](https://metacpan.org/pod/prev) and [current](https://metacpan.org/pod/current) will
        return `undef`. [next](https://metacpan.org/pod/next) will retrieve the next (in this case,
        first) value and switch the iterator's state to _active_

    - Iterator::Constant::ACTIVE

        The iterator has been advanced at least once.  [current](https://metacpan.org/pod/current) will return
        the value returned by the last call to [next](https://metacpan.org/pod/next). [next](https://metacpan.org/pod/next) will advance
        the iterator.  An _active_ state does not indicate that there are
        further values available from the iterator, only that the iterator
        has been advanced.

    - Iterator::Constant::EXHAUSTED

        There are no more values available.  [current](https://metacpan.org/pod/current) and [next](https://metacpan.org/pod/next) will
        return `undef`.  [prev](https://metacpan.org/pod/prev) will return the last valid value returned by
        [next](https://metacpan.org/pod/next).

        The state changes from _active_ to _exhausted_ only after [next](https://metacpan.org/pod/next)
        has been called _after_ the last valid value has been returned by a
        previous call to [next](https://metacpan.org/pod/next). In other words, if `$iter-`next> returns
        the last valid value, the state is still _active_.  The next call to
        `$iter-`next> will switch the iterator state to _exhausted_.

# BUGS

Please report any bugs or feature requests on the bugtracker website
[https://rt.cpan.org/Public/Dist/Display.html?Name=Iterator-Flex](https://rt.cpan.org/Public/Dist/Display.html?Name=Iterator-Flex) or by
email to
[bug-Iterator-Flex@rt.cpan.org](mailto:bug-Iterator-Flex@rt.cpan.org).

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

# SOURCE

The development version is on github at [https://github.com/djerius/iterator-flex](https://github.com/djerius/iterator-flex)
and may be cloned from [git://github.com/djerius/iterator-flex.git](git://github.com/djerius/iterator-flex.git)

# AUTHOR

Diab Jerius <djerius@cpan.org>

# COPYRIGHT AND LICENSE

This software is Copyright (c) 2018 by Smithsonian Astrophysical Observatory.

This is free software, licensed under:

    The GNU General Public License, Version 3, June 2007
